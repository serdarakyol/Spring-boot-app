#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
ROOT_DIR="$(dirname "$(realpath ${SOURCE})")"

function displayUsage() {
    echo "
Usage: $0 <command>
<command>:
    help
        Display this help message.
    build-jar
        Build jar file
    code-run
        Runs containerized app
    performance-test
        Stress testing for the API
"
}

function buildJar() {
    if ! [ -x "$(command -v mvn --version)" ]; then
        echo "Installing maven"
        apt install maven
    fi
    mvn clean package -DskipTests && costumized_success_message "Jar file built succesfully" || costumized_error_message "Jar file could not build"
}

function costumized_error_message () {
    local COLOR_RED="$(tput setaf 9 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_RED}ERROR: "$1"${COLOR_RESET}" 1>&2;
    exit 1
}

function costumized_success_message () {
    local COLOR_GREEN="$(tput setaf 10 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_GREEN}INFO: "$1"${COLOR_RESET}" 1>&2;
}

function costumized_warning_message () {
    local COLOR_YELLOW="$(tput setaf 3 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_YELLOW}INFO: "$1"${COLOR_RESET}" 1>&2;
}

function codeRun() {
    # check if script run with sudo
    if [ "$EUID" -ne 0 ]; then 
        costumized_error_message "code-run must run with sudo privileges."
    fi

    # check if docker installed
    if ! [ -x "$(command -v docker --version)" ]; then
        costumized_error_message "Docker Desktop is not installed. 
        Please install Docker Desktop from https://docs.docker.com/get-docker/"
    fi

    # build app
    docker compose up --build
}

function performanceTesting() {
    # check if locust installed
    if ! [ -x "$(command -v locust -V)" ]; then
        costumized_warning_message "Locust is not installed. Installing..."
        pip3 install locust
    fi
    local HOST=http://localhost:8080
    local CONCURRENT=500
    local RATE=500
    local DURATION=10
    locust -f ${ROOT_DIR}/performance-testing/locust.py --host ${HOST} --headless --users=${CONCURRENT} --spawn-rate=${RATE} --run-time=${DURATION}s --reset-stats --only-summary
}

function main() {
    case "${1-notset}" in
        help)
            displayUsage
            ;;
        build-jar)
            buildJar "${@}"
            ;;
        code-run)
            codeRun "${@}"
            ;;
        performance-test)
            performanceTesting "${@}"
            ;;
        *)
            >&2 echo "Error: Unknown command: '${1-}'"
            >&2 displayUsage
            exit 1
    esac
}

main "$@"
